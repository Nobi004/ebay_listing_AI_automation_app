#!/usr/bin/env python3
"""
Configuration helper script for eBay Listing Generator
This script helps set up the required environment variables and test API connections.
"""

import os
import sys
import boto3
import openai
import requests
from botocore.exceptions import ClientError, NoCredentialsError
from typing import Dict, Any

class ConfigurationManager:
    """
    Manages configuration setup and testing for the eBay Listing Generator
    """
    
    def __init__(self):
        self.config = {}
        self.required_vars = {
            'OPENAI_API_KEY': 'OpenAI API key for AI generation',
            'EBAY_CLIENT_ID': 'eBay API client ID',
            'EBAY_CLIENT_SECRET': 'eBay API client secret',  
            'EBAY_REDIRECT_URI': 'eBay OAuth redirect URI',
            'AWS_ACCESS_KEY_ID': 'AWS access key for S3 storage',
            'AWS_SECRET_ACCESS_KEY': 'AWS secret key for S3 storage',
            'S3_BUCKET_NAME': 'S3 bucket name for image storage'
        }
    
    def check_existing_config(self) -> Dict[str, Any]:
        """
        Check which environment variables are already set
        
        Returns:
            Dictionary with configuration status
        """
        status = {}
        for var in self.required_vars:
            value = os.getenv(var)
            status[var] = {
                'set': value is not None,
                'value': value if value else 'Not set',
                'description': self.required_vars[var]
            }
        return status
    
    def display_config_status(self):
        """
        Display current configuration status
        """
        print("🔧 Current Configuration Status:")
        print("=" * 50)
        
        status = self.check_existing_config()
        
        for var, info in status.items():
            status_icon = "✅" if info['set'] else "❌"
            print(f"{status_icon} {var}")
            print(f"   {info['description']}")
            if info['set']:
                # Show partial key for security
                if 'key' in var.lower() or 'secret' in var.lower():
                    masked_value = info['value'][:8] + "..." if len(info['value']) > 8 else "Set"
                    print(f"   Value: {masked_value}")
                else:
                    print(f"   Value: {info['value']}")
            else:
                print(f"   Status: {info['value']}")
            print()
    
    def interactive_setup(self):
        """
        Interactive setup for configuration variables
        """
        print("🚀 Interactive Configuration Setup")
        print("=" * 50)
        
        for var, description in self.required_vars.items():
            current_value = os.getenv(var)
            
            print(f"\n{description}")
            print(f"Variable: {var}")
            
            if current_value:
                print(f"Current value: {'*' * 8}...{current_value[-4:]}")
                use_existing = input("Use existing value? (y/n): ").lower().strip()
                if use_existing == 'y':
                    continue
            
            if 'REDIRECT_URI' in var:
                default_value = "http://localhost:8501/auth/callback"
                new_value = input(f"Enter value (default: {default_value}): ").strip()
                if not new_value:
                    new_value = default_value
            else:
                new_value = input(f"Enter value: ").strip()
            
            if new_value:
                os.environ[var] = new_value
                print(f"✅ Set {var}")
            else:
                print(f"⚠️  Skipped {var}")
        
        self.generate_env_file()
    
    def generate_env_file(self):
        """
        Generate .env file with current configuration
        """
        print("\n💾 Generating .env file...")
        
        env_content = "# eBay Listing Generator Configuration\n"
        env_content += "# Generated by config.py\n\n"
        
        for var in self.required_vars:
            value = os.getenv(var)
            if value:
                env_content += f"{var}={value}\n"
            else:
                env_content += f"# {var}=your_value_here\n"
        
        # Add optional variables
        env_content += "\n# Optional Configuration\n"
        env_content += f"EBAY_SANDBOX={os.getenv('EBAY_SANDBOX', 'true')}\n"
        env_content += f"AWS_REGION={os.getenv('AWS_REGION', 'us-east-1')}\n"
        
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("✅ .env file created successfully!")
        print("You can now run: python-dotenv run streamlit run app.py")
    
    def test_openai_connection(self) -> bool:
        """
        Test OpenAI API connection
        
        Returns:
            True if connection successful, False otherwise
        """
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("❌ OpenAI API key not set")
            return False
        
        try:
            openai.api_key = api_key
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "Hello"}],
                max_tokens=5
            )
            print("✅ OpenAI API connection successful")
            return True
        except Exception as e:
            print(f"❌ OpenAI API connection failed: {str(e)}")
            return False
    
    def test_aws_connection(self) -> bool:
        """
        Test AWS S3 connection
        
        Returns:
            True if connection successful, False otherwise
        """
        try:
            s3_client = boto3.client(
                's3',
                aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
                aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY'),
                region_name=os.getenv('AWS_REGION', 'us-east-1')
            )
            
            bucket_name = os.getenv('S3_BUCKET_NAME')
            if not bucket_name:
                print("❌ S3 bucket name not set")
                return False
            
            # Test bucket access
            s3_client.head_bucket(Bucket=bucket_name)
            print("✅ AWS S3 connection successful")
            return True
            
        except NoCredentialsError:
            print("❌ AWS credentials not found")
            return False
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == '404':
                print(f"❌ S3 bucket '{bucket_name}' not found")
            else:
                print(f"❌ AWS S3 connection failed: {error_code}")
            return False
        except Exception as e:
            print(f"❌ AWS connection failed: {str(e)}")
            return False
    
    def test_ebay_connection(self) -> bool:
        """
        Test eBay API configuration (not actual connection as it requires OAuth)
        
        Returns:
            True if configuration looks valid, False otherwise
        """
        client_id = os.getenv('EBAY_CLIENT_ID')
        client_secret = os.getenv('EBAY_CLIENT_SECRET')
        redirect_uri = os.getenv('EBAY_REDIRECT_URI')
        
        if not all([client_id, client_secret, redirect_uri]):
            print("❌ eBay API configuration incomplete")
            return False
        
        # Test if we can build OAuth URL
        try:
            oauth_url = f"https://auth.ebay.com/oauth2/authorize?client_id={client_id}&response_type=code&redirect_uri={redirect_uri}&scope=https://api.ebay.com/oauth/api_scope/sell.inventory"
            print("✅ eBay API configuration valid")
            print(f"OAuth URL: {oauth_url[:60]}...")
            return True
        except Exception as e:
            print(f"❌ eBay API configuration error: {str(e)}")
            return False
    
    def run_all_tests(self):
        """
        Run all connection tests
        """
        print("\n🧪 Running Connection Tests")
        print("=" * 50)
        
        tests = [
            ("OpenAI API", self.test_openai_connection),
            ("AWS S3", self.test_aws_connection),
            ("eBay API", self.test_ebay_connection)
        ]
        
        results = []
        for name, test_func in tests:
            print(f"\nTesting {name}...")
            result = test_func()
            results.append((name, result))
        
        print("\n📊 Test Results Summary:")
        print("=" * 30)
        for name, result in results:
            status = "✅ PASS" if result else "❌ FAIL"
            print(f"{name}: {status}")
        
        all_passed = all(result for _, result in results)
        if all_passed:
            print("\n🎉 All tests passed! Your configuration is ready.")
        else:
            print("\n⚠️  Some tests failed. Please check your configuration.")
        
        return all_passed

def main():
    """
    Main function to run the configuration manager
    """
    config_manager = ConfigurationManager()
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'status':
            config_manager.display_config_status()
        elif command == 'setup':
            config_manager.interactive_setup()
        elif command == 'test':
            config_manager.run_all_tests()
        elif command == 'generate-env':
            config_manager.generate_env_file()
        else:
            print(f"Unknown command: {command}")
            print("Available commands: status, setup, test, generate-env")
    else:
        # Interactive mode
        while True:
            print("\n🔧 eBay Listing Generator Configuration")
            print("=" * 50)
            print("1. Check current configuration status")
            print("2. Interactive setup")
            print("3. Test connections")
            print("4. Generate .env file")
            print("5. Exit")
            
            choice = input("\nSelect option (1-5): ").strip()
            
            if choice == '1':
                config_manager.display_config_status()
            elif choice == '2':
                config_manager.interactive_setup()
            elif choice == '3':
                config_manager.run_all_tests()
            elif choice == '4':
                config_manager.generate_env_file()
            elif choice == '5':
                print("Goodbye! 👋")
                break
            else:
                print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()